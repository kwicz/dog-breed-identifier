{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","details","flexDirection","content","flex","cover","width","machine","initial","states","on","next","loadingModel","modelReady","imageReady","showImage","identifying","complete","showResults","App","classes","useTheme","useState","results","setResults","imageURL","setImageURL","model","setModel","imageRef","useRef","inputRef","useReducer","state","event","appState","dispatch","loadModel","a","mobilenet","identify","classify","current","reset","actionButton","action","text","icon","click","Card","className","CardContent","Typography","component","variant","CardActionArea","Button","color","onClick","map","probability","key","toFixed","CardMedia","src","alt","ref","type","accept","capture","onChange","target","files","length","url","URL","createObjectURL","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8ad5d81f.chunk.js","sourcesContent":["import React, { useState, useRef, useReducer } from \"react\";\nimport * as mobilenet from \"@tensorflow-models/mobilenet\";\nimport \"./App.css\";\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport Loop from '@material-ui/icons/Loop';\nimport PublishIcon from '@material-ui/icons/Publish';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n  details: {\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  content: {\n    flex: '1 0 auto',\n  },\n  cover: {\n    width: 151,\n  }\n}));\n\nconst machine = {\n  initial: \"initial\",\n  states: {\n    initial: { on: { next: \"loadingModel\" } },\n    loadingModel: { on: { next: \"modelReady\" } },\n    modelReady: { on: { next: \"imageReady\" } },\n    imageReady: { on: { next: \"identifying\" }, showImage: true },\n    identifying: { on: { next: \"complete\" } },\n    complete: { on: { next: \"modelReady\" }, showImage: true, showResults: true }\n  }\n};\n\nfunction App() {\n  // Constants for styling\n  const classes = useStyles();\n  const theme = useTheme();\n  // Constants for state\n  const [results, setResults] = useState([]);\n  const [imageURL, setImageURL] = useState(null);\n  const [model, setModel] = useState(null);\n  const imageRef = useRef();\n  const inputRef = useRef();\n\n  const reducer = (state, event) =>\n    machine.states[state].on[event] || machine.initial;\n\n  const [appState, dispatch] = useReducer(reducer, machine.initial);\n  const next = () => dispatch(\"next\");\n\n  const loadModel = async () => {\n    next();\n    const model = await mobilenet.load();\n    setModel(model);\n    next();\n  };\n\n  const identify = async () => {\n    next();\n    const results = await model.classify(imageRef.current);\n    setResults(results);\n    next();\n  };\n\n  const reset = async () => {\n    setResults([]);\n    next();\n  };\n\n  const upload = () => inputRef.current.click();\n\n  const handleUpload = event => {\n    const { files } = event.target;\n    if (files.length > 0) {\n      const url = URL.createObjectURL(event.target.files[0]);\n      setImageURL(url);\n      next();\n    }\n  };\n\n  const actionButton = {\n    initial: { action: loadModel, text: \"Load Model\", icon: <ArrowForwardIcon /> },\n    loadingModel: { text: \"Loading Model...\", icon: <Loop /> },\n    modelReady: { action: upload, text: \"Upload Image\", icon: <PublishIcon /> },\n    imageReady: { action: identify, text: \"Identify Breed\", icon: <ArrowForwardIcon /> },\n    identifying: { text: \"Identifying...\", icon: <Loop /> },\n    complete: { action: reset, text: \"Reset\", icon: <ArrowForwardIcon /> }\n  };\n\n  const { showImage, showResults } = machine.states[appState];\n\n  return (\n    <Card className={classes.root}>\n      <div className={classes.details}>\n        <CardContent className={classes.content}>\n          <Typography component=\"h5\" variant=\"h5\">\n            Find your dog's Breed\n          </Typography>\n        </CardContent>\n        <CardActionArea>\n          <Button variant=\"contained\" color=\"primary\" onClick={actionButton[appState].action || (() => {})}>\n            {actionButton[appState].text} \n            {actionButton[appState].icon}\n          </Button>\n        </CardActionArea>\n        {showResults && (\n          <ul>\n            {results.map(({ className, probability }) => (\n              <li key={className}>{`${className}: %${(probability * 100).toFixed(\n                2\n              )}`}</li>\n            ))}\n          </ul>\n          )}    \n      </div>\n      <CardMedia>\n        {showImage && <img src={imageURL} alt=\"upload-preview\" ref={imageRef} />}\n          <input\n            type=\"file\"\n            accept=\"image/*\"\n            capture=\"camera\"\n            onChange={handleUpload}\n            ref={inputRef}\n          />\n      </CardMedia>\n    </Card>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}